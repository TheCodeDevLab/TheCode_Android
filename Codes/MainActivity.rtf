{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
}
{\colortbl;\red255\green255\blue255;\red250\green78\blue8;\red255\green255\blue255;\red141\green251\blue31;
\red255\green255\blue255;\red162\green102\blue234;\red120\green241\blue28;\red25\green173\blue186;\red236\green254\blue73;
\red90\green254\blue7;\red243\green186\blue30;\red193\green161\blue157;\red82\green1\blue103;\red152\green213\blue67;
}
{\*\expandedcolortbl;;\cssrgb\c99490\c39861\c0;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c60847\c96832\c15566;
\cssrgb\c100000\c100000\c99985;\cssrgb\c69973\c50384\c93377;\cssrgb\c52858\c93715\c14022;\cssrgb\c4448\c72763\c77700;\cssrgb\c93975\c98373\c35430;
\cssrgb\c39842\c97486\c0;\cssrgb\c96671\c77090\c14776;\cssrgb\c80418\c69465\c67753;\cssrgb\c40225\c9419\c48160;\cssrgb\c65239\c85074\c33129;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 package 
\f1\b0 \cf4 fr.juliette.thecode\cf5 ;\
\

\f0\b \cf2 import 
\f1\b0 \cf4 android.annotation.
\f0\b \cf6 SuppressLint
\f1\b0 \cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.app.AlertDialog\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.content.ClipboardManager\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.content.\cf7 DialogInterface\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.content.Intent\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.graphics.Color\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.os.Bundle\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.os.Environment\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.support.v7.app.AppCompatActivity\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.support.v7.app.AppCompatDelegate\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.text.\cf7 Editable\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.text.\cf7 InputType\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.text.SpannableString\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.text.\cf7 TextWatcher\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.text.method.LinkMovementMethod\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.text.util.Linkify\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.view.\cf7 Menu\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.view.\cf7 MenuItem\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.view.View\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.widget.Button\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.widget.EditText\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.widget.SeekBar\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.widget.Switch\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.widget.TextView\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 android.widget.Toast\cf5 ;\
\

\f0\b \cf2 import 
\f1\b0 \cf4 java.io.File\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 java.io.FileInputStream\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 java.io.FileNotFoundException\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 java.io.FileOutputStream\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 java.io.IOException\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 java.math.BigInteger\cf5 ;\

\f0\b \cf2 import 
\f1\b0 \cf4 java.security.MessageDigest\cf5 ;\
\

\f0\b \cf2 public class 
\f1\b0 \cf4 MainActivity 
\f0\b \cf2 extends 
\f1\b0 \cf4 AppCompatActivity \cf8 \{\
\
    \cf6 // MARK : Introduction des connexions\
\
    \cf4 TextView \cf9 securiteTextView\cf5 ;\
    \cf4 TextView \cf9 longueurTextView\cf5 ;\
\
    \cf4 EditText \cf9 siteEditText\cf5 ;\
    \cf4 EditText \cf9 clefEditText\cf5 ;\
    \cf4 EditText \cf9 motPasseEditText\cf5 ;\
\
    \cf4 Button \cf9 questionButton\cf5 ;\
    \cf4 Button \cf9 copierButton\cf5 ;\
\
    \cf4 Switch \cf9 minSwitch\cf5 ;\
    \cf4 Switch \cf9 majSwitch\cf5 ;\
    \cf4 Switch \cf9 symSwitch\cf5 ;\
    \cf4 Switch \cf9 chiSwitch\cf5 ;\
\
    \cf4 SeekBar \cf9 longueurSeekBar\cf5 ;\
    \cf4 SeekBar \cf9 securiteSeekBar\cf5 ;\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 String \cf9 fileName \cf5 = \cf10 "modeSombre.txt"\cf5 ;\
\
    
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\{\cf10 "SetTextI18n"\cf5 , \cf10 "ResourceType"\cf8 \})\
    
\f0\b \cf2 public void 
\f1\b0 \cf11 onCreate\cf8 (\cf4 Bundle \cf12 savedInstanceState\cf8 ) \{\
\
        
\f0\b \cf2 super
\f1\b0 \cf5 .\cf11 onCreate\cf8 (\cf12 savedInstanceState\cf8 )\cf5 ;\
        \cf11 setContentView\cf8 (\cf4 R\cf5 .\cf4 layout\cf5 .
\f2\i\b \cf13 activity_main
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf6 // MARK : Connexion avec \'e9l\'e9ment graphiques\
\
        \cf9 securiteTextView \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 securiteTextView
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 longueurTextView \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 longueurTextView
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf9 clefEditText \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 clefEditText
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 siteEditText \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 siteEditText
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 motPasseEditText \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 motPasseEditText
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf9 questionButton \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 questionButton
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 copierButton \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 copierButton
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf9 minSwitch \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 minSwitch
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 majSwitch \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 majSwitch
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 symSwitch \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 symSwitch
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 chiSwitch \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 chiSwitch
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf9 securiteSeekBar \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 securiteSeekBar
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf9 longueurSeekBar \cf5 = \cf11 findViewById\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 longueurSeekBar
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf6 // MARK : Connexion avec fonctions\
\
        \cf9 clefEditText\cf5 .\cf11 addTextChangedListener\cf8 (\cf9 textWatcher\cf8 )\cf5 ;\
        \cf9 siteEditText\cf5 .\cf11 addTextChangedListener\cf8 (\cf9 textWatcher\cf8 )\cf5 ;\
\
        \cf9 longueurSeekBar\cf5 .\cf11 setOnSeekBarChangeListener\cf8 (\cf9 longueurListener\cf8 )\cf5 ;\
        \cf9 securiteSeekBar\cf5 .\cf11 setOnSeekBarChangeListener\cf8 (\cf9 securiteListener\cf8 )\cf5 ;\
\
        \cf9 clefEditText\cf5 .\cf11 setInputType\cf8 (\cf7 InputType\cf5 .
\f2\i\b \cf13 TYPE_CLASS_TEXT 
\f1\i0\b0 \cf5 | \cf7 InputType\cf5 .
\f2\i\b \cf13 TYPE_TEXT_VARIATION_PASSWORD
\f1\i0\b0 \cf8 )\cf5 ;\
\
        \cf11 lancer\cf8 ()\cf5 ;\
\
    \cf8 \}\
    \
    \cf6 // MARK : Initialisations\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 String \cf9 base \cf5 = \cf10 ""\cf5 ;\
    
\f0\b \cf2 private static boolean 
\f1\b0 \cf5 darkMode = 
\f0\b \cf2 true
\f1\b0 \cf5 ;\
\
    \cf6 // MARK : Fonctions\
\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 lancer\cf8 () \{\
        \cf4 File \cf9 mFile \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 File\cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf6 getExternalStorageDirectory
\f1\i0\b0 \cf8 ()\cf5 .\cf11 getPath\cf8 () \cf5 + \cf10 "/Android/data/ " \cf5 + \cf11 getPackageName\cf8 () \cf5 + \cf10 "/files/" \cf5 + \cf9 fileName\cf8 )\cf5 ;\
        \cf4 String \cf9 text \cf5 = \cf11 read\cf8 (\cf9 mFile\cf8 )\cf5 ;\
\
        \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf9 text\cf5 , \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_SHORT
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 text \cf5 == 
\f0\b \cf2 null
\f1\b0 \cf8 ) \{\
            \cf11 write\cf8 (\cf10 "DARK"\cf5 , \cf9 mFile\cf8 )\cf5 ;\
        \cf8 \}\
\
        \cf5 darkMode = \cf10 "DARK"\cf5 .\cf11 equals\cf8 (\cf9 text\cf8 )\cf5 ;\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 actualMode \cf5 = \cf4 AppCompatDelegate\cf5 .
\f2\i\b \cf6 getDefaultNightMode
\f1\i0\b0 \cf8 ()\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 darkMode == \cf8 (\cf9 actualMode \cf5 == \cf14 0\cf8 ))\{\
            \cf11 setDarkMode\cf8 ()\cf5 ;\
        \cf8 \}\
\
    \}\
\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 write\cf8 (\cf4 String \cf12 text\cf5 , \cf4 File \cf12 mFile\cf8 ) \{\
        
\f0\b \cf2 try 
\f1\b0 \cf8 \{\
            \cf6 // Flux interne\
            \cf4 FileOutputStream \cf5 output = \cf11 openFileOutput\cf8 (\cf9 fileName\cf5 , 
\f2\i\b \cf13 MODE_PRIVATE
\f1\i0\b0 \cf8 )\cf5 ;\
\
            \cf6 // On \'e9crit dans le flux interne\
\
            \cf5 output.\cf11 write\cf8 (\cf12 text\cf5 .\cf11 getBytes\cf8 ())\cf5 ;\
\
            
\f0\b \cf2 if
\f1\b0 \cf8 (\cf5 output != 
\f0\b \cf2 null
\f1\b0 \cf8 )\
                \cf5 output.\cf11 close\cf8 ()\cf5 ;\
\
            \cf6 // Si le fichier est lisible et qu'on peut \'e9crire dedans\
            
\f0\b \cf2 if
\f1\b0 \cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf13 MEDIA_MOUNTED
\f1\i0\b0 \cf5 .\cf11 equals\cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf6 getExternalStorageState
\f1\i0\b0 \cf8 ())\
                    \cf5 && !\cf4 Environment\cf5 .
\f2\i\b \cf13 MEDIA_MOUNTED_READ_ONLY
\f1\i0\b0 \cf5 .\cf11 equals\cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf6 getExternalStorageState
\f1\i0\b0 \cf8 ())) \{\
                \cf6 // On cr\'e9e un nouveau fichier. Si le fichier existe d\'e9j\'e0, il ne sera pas cr\'e9\'e9\
                \cf12 mFile\cf5 .\cf11 createNewFile\cf8 ()\cf5 ;\
                output = 
\f0\b \cf2 new 
\f1\b0 \cf11 FileOutputStream\cf8 (\cf12 mFile\cf8 )\cf5 ;\
                \cf4 String \cf9 darkName \cf5 = \cf10 "DARK"\cf5 ;\
                output.\cf11 write\cf8 (\cf9 darkName\cf5 .\cf11 getBytes\cf8 ())\cf5 ;\
                
\f0\b \cf2 if
\f1\b0 \cf8 (\cf5 output != 
\f0\b \cf2 null
\f1\b0 \cf8 )\
                    \cf5 output.\cf11 close\cf8 ()\cf5 ;\
            \cf8 \}\
        \}\
        
\f0\b \cf2 catch 
\f1\b0 \cf8 (\cf4 FileNotFoundException \cf12 e\cf8 ) \{\
            \cf12 e\cf5 .\cf11 printStackTrace\cf8 ()\cf5 ;\
        \cf8 \} 
\f0\b \cf2 catch 
\f1\b0 \cf8 (\cf4 IOException \cf12 e\cf8 ) \{\
            \cf12 e\cf5 .\cf11 printStackTrace\cf8 ()\cf5 ;\
        \cf8 \}\
    \}\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 String \cf11 read\cf8 (\cf4 File \cf12 mFile\cf8 ) \{\
        \cf4 String \cf5 text = \cf10 ""\cf5 ;\
        
\f0\b \cf2 try
\f1\b0 \cf8 \{\
        \cf4 FileInputStream \cf5 input = \cf11 openFileInput\cf8 (\cf9 fileName\cf8 )\cf5 ;\
        
\f0\b \cf2 int 
\f1\b0 \cf5 value;\
\
        \cf6 // On utilise un StringBuffer pour construire la cha\'eene au fur et \'e0 mesure\
        \cf4 StringBuffer \cf5 lu = 
\f0\b \cf2 new 
\f1\b0 \cf11 StringBuffer\cf8 ()\cf5 ;\
        \cf6 // On lit les caract\'e8res les uns apr\'e8s les autres\
        
\f0\b \cf2 while 
\f1\b0 \cf8 ((\cf5 value = input.\cf11 read\cf8 ()) \cf5 != -\cf14 1\cf8 ) \{\
            \cf6 // On \'e9crit dans le fichier le caract\'e8re lu\
            \cf5 lu.\cf11 append\cf8 ((
\f0\b \cf2 char
\f1\b0 \cf8 ) \cf5 value\cf8 )\cf5 ;\
        \cf8 \}\
\
        \cf5 text = lu.\cf11 toString\cf8 ()\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 input != 
\f0\b \cf2 null
\f1\b0 \cf8 )\
            \cf5 input.\cf11 close\cf8 ()\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf13 MEDIA_MOUNTED
\f1\i0\b0 \cf5 .\cf11 equals\cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf6 getExternalStorageState
\f1\i0\b0 \cf8 ())) \{\
            \cf5 lu = 
\f0\b \cf2 new 
\f1\b0 \cf11 StringBuffer\cf8 ()\cf5 ;\
            
\f0\b \cf2 try 
\f1\b0 \cf8 \{\
                \cf5 input = 
\f0\b \cf2 new 
\f1\b0 \cf11 FileInputStream\cf8 (\cf12 mFile\cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 catch 
\f1\b0 \cf8 (\cf4 FileNotFoundException \cf12 ex\cf8 ) \{\
                \cf12 ex\cf5 .\cf11 printStackTrace\cf8 ()\cf5 ;\
            \cf8 \}\
            
\f0\b \cf2 while 
\f1\b0 \cf8 ((\cf5 value = input.\cf11 read\cf8 ()) \cf5 != -\cf14 1\cf8 )\
                \cf5 lu.\cf11 append\cf8 ((
\f0\b \cf2 char
\f1\b0 \cf8 ) \cf5 value\cf8 )\cf5 ;\
\
            text = lu.\cf11 toString\cf8 ()\cf5 ;\
\
            
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 input != 
\f0\b \cf2 null
\f1\b0 \cf8 )\
                \cf5 input.\cf11 close\cf8 ()\cf5 ;\
        \cf8 \}\
        \}
\f0\b \cf2 catch 
\f1\b0 \cf8 (\cf4 FileNotFoundException \cf12 e\cf8 ) \{\
            \cf12 e\cf5 .\cf11 printStackTrace\cf8 ()\cf5 ;\
        \cf8 \} 
\f0\b \cf2 catch 
\f1\b0 \cf8 (\cf4 IOException \cf12 e\cf8 ) \{\
            \cf12 e\cf5 .\cf11 printStackTrace\cf8 ()\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 return 
\f1\b0 \cf5 text;\
    \cf8 \}\
\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 setDarkMode\cf8 () \{\
\
        \cf4 File \cf9 mFile \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 File\cf8 (\cf4 Environment\cf5 .
\f2\i\b \cf6 getExternalStorageDirectory
\f1\i0\b0 \cf8 ()\cf5 .\cf11 getPath\cf8 () \cf5 + \cf10 "/Android/data/ " \cf5 + \cf11 getPackageName\cf8 () \cf5 + \cf10 "/files/" \cf5 + \cf9 fileName\cf8 )\cf5 ;\
        \cf4 String \cf5 darkModeString;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 darkMode\cf8 )\{\
            \cf5 darkModeString = \cf10 "DARK"\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf5 darkModeString = \cf10 "LIGHT"\cf5 ;\
        \cf8 \}\
        \cf11 write\cf8 (\cf5 darkModeString, \cf9 mFile\cf8 )\cf5 ;\
        darkModeString = \cf11 read\cf8 (\cf9 mFile\cf8 )\cf5 ;\
\
        \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf10 "Prochain : " \cf5 + darkModeString, \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_SHORT
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
\
        \cf4 String \cf9 message\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 darkMode\cf8 )\{\
            \cf4 AppCompatDelegate\cf5 .
\f2\i\b \cf6 setDefaultNightMode
\f1\i0\b0 \cf8 (\cf4 AppCompatDelegate\cf5 .
\f2\i\b \cf13 MODE_NIGHT_YES
\f1\i0\b0 \cf8 )\cf5 ;\
            \cf9 message \cf5 = \cf10 "Mode clair activ\'e9"\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf4 AppCompatDelegate\cf5 .
\f2\i\b \cf6 setDefaultNightMode
\f1\i0\b0 \cf8 (\cf4 AppCompatDelegate\cf5 .
\f2\i\b \cf13 MODE_NIGHT_NO
\f1\i0\b0 \cf8 )\cf5 ;\
            \cf9 message \cf5 = \cf10 "Mode sombre activ\'e9"\cf5 ;\
        \cf8 \}\
        \cf11 startActivity\cf8 (
\f0\b \cf2 new 
\f1\b0 \cf11 Intent\cf8 (\cf11 getApplicationContext\cf8 ()\cf5 , \cf4 MainActivity\cf5 .
\f0\b \cf2 class
\f1\b0 \cf8 ))\cf5 ;\
\
        \cf11 finish\cf8 ()\cf5 ;\
        \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf9 message\cf5 , \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_LONG
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
\
    \cf8 \}\
\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 copier\cf8 (\cf4 java.lang.String \cf12 mot\cf8 ) \{\
        \cf6 // Copie le mot dans le presse papier\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf12 mot \cf5 != 
\f0\b \cf2 null
\f1\b0 \cf8 ) \{\
            \cf4 ClipboardManager \cf9 clipboard \cf5 = \cf8 (\cf4 ClipboardManager\cf8 ) \cf11 getSystemService\cf8 (
\f2\i\b \cf13 CLIPBOARD_SERVICE
\f1\i0\b0 \cf8 )\cf5 ;\
            
\f0\b \cf2 assert 
\f1\b0 \cf9 clipboard \cf5 != 
\f0\b \cf2 null
\f1\b0 \cf5 ;\
            \cf4 android.content.ClipData \cf9 clip \cf5 = \cf4 android.content.ClipData\cf5 .
\f2\i\b \cf6 newPlainText
\f1\i0\b0 \cf8 (\cf10 "Mot de passe"\cf5 , \cf12 mot\cf8 )\cf5 ;\
            \cf9 clipboard\cf5 .\cf11 setPrimaryClip\cf8 (\cf9 clip\cf8 )\cf5 ;\
        \cf8 \}\
    \}\
\
\
    
\f0\b \cf2 private static 
\f1\b0 \cf4 String \cf11 dec2Base\cf8 (\cf4 BigInteger \cf5 x, \cf4 String \cf12 base\cf8 ) \{\
        \cf6 // Convertit un BigInteger dans une base ayant base comme support\
\
        \cf4 BigInteger \cf9 b \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 BigInteger\cf8 (\cf4 String\cf5 .
\f2\i\b \cf6 valueOf
\f1\i0\b0 \cf8 (\cf12 base\cf5 .\cf11 length\cf8 ()))\cf5 ;\
        \cf4 StringBuilder \cf5 result = 
\f0\b \cf2 new 
\f1\b0 \cf11 StringBuilder\cf8 ()\cf5 ;\
        \cf4 BigInteger \cf9 zero \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 BigInteger\cf8 (\cf10 "0"\cf8 )\cf5 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf12 x\cf5 .\cf11 equals\cf8 (\cf9 zero\cf8 )) \{\
            \cf5 result = 
\f0\b \cf2 new 
\f1\b0 \cf11 StringBuilder\cf8 (\cf12 base\cf5 .\cf11 charAt\cf8 (\cf14 0\cf8 ))\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            
\f0\b \cf2 while 
\f1\b0 \cf8 (\cf5 !\cf12 x\cf5 .\cf11 equals\cf8 (\cf9 zero\cf8 )) \{\
                
\f0\b \cf2 int 
\f1\b0 \cf9 inter \cf5 = \cf12 x\cf5 .\cf11 mod\cf8 (\cf9 b\cf8 )\cf5 .\cf11 intValue\cf8 ()\cf5 ;\
                result.\cf11 insert\cf8 (\cf14 0\cf5 , \cf12 base\cf5 .\cf11 charAt\cf8 (\cf9 inter\cf8 ))\cf5 ;\
                x = x.\cf11 divide\cf8 (\cf9 b\cf8 )\cf5 ;\
            \cf8 \}\
        \}\
        
\f0\b \cf2 return 
\f1\b0 \cf5 result.\cf11 toString\cf8 ()\cf5 ;\
    \cf8 \}\
\
\
    
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\cf10 "SetTextI18n"\cf8 )\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 generer\cf8 () \{\
        \cf6 // G\'e9n\'e8re le mot de passe\
\
        \cf11 modifBase\cf8 ()\cf5 ;\
        \cf9 motPasseEditText\cf5 .\cf11 setText\cf8 (\cf10 "Il manque des valeurs"\cf8 )\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 clefEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 .\cf11 length\cf8 () \cf5 == \cf14 0 \cf5 || \cf9 siteEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 .\cf11 length\cf8 () \cf5 == \cf14 0\cf8 ) \{\
            \cf6 // Rien dans site ou dans clef\
        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf5 !\cf8 (\cf9 minSwitch\cf5 .\cf11 isChecked\cf8 () \cf5 || \cf9 majSwitch\cf5 .\cf11 isChecked\cf8 () \cf5 || \cf9 chiSwitch\cf5 .\cf11 isChecked\cf8 () \cf5 || \cf9 symSwitch\cf5 .\cf11 isChecked\cf8 ())) \{\
            \cf6 // Aucun checkbuttons cliqu\'e9s : Toast pour pr\'e9venir\
\
            \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf10 "Aucun type de caract\'e8res n'est coch\'e9"\cf5 , \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_LONG
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf6 // On peut g\'e9n\'e9rer le mot de passe\
\
            \cf4 String \cf9 clef \cf5 = \cf9 clefEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 ;\
            \cf4 String \cf9 site \cf5 = \cf9 siteEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 ;\
            \cf4 String\cf8 [] \cf9 result \cf5 = \cf11 modification\cf8 (\cf9 site \cf5 + \cf9 clef\cf8 )\cf5 ;\
\
            \cf9 motPasseEditText\cf5 .\cf11 setText\cf8 (\cf9 result\cf8 [\cf14 0\cf8 ])\cf5 ;\
        \cf8 \}\
        \cf11 modifSecurite\cf8 ()\cf5 ;\
    \cf8 \}\
\
\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 modifBase\cf8 () \{\
        \cf6 // Modifie la base suivant les caract\'e8res coch\'e9s\
\
        \cf9 base \cf5 = \cf10 ""\cf5 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 minSwitch\cf5 .\cf11 isChecked\cf8 ()) \{\
            \cf9 base \cf5 += \cf10 "portezcviuxwhskyajgblndqfm"\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 majSwitch\cf5 .\cf11 isChecked\cf8 ()) \{\
            \cf9 base \cf5 += \cf10 "THEQUICKBROWNFXJMPSVLAZYDG"\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 symSwitch\cf5 .\cf11 isChecked\cf8 ()) \{\
            \cf9 base \cf5 += \cf10 "@#&!)-%;<:*$+=/?>("\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 chiSwitch\cf5 .\cf11 isChecked\cf8 ()) \{\
            \cf9 base \cf5 += \cf10 "567438921"\cf5 ;\
        \cf8 \}\
    \}\
\
\
    
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\cf10 "SetTextI18n"\cf8 )\
    
\f0\b \cf2 private void 
\f1\b0 \cf11 modifSecurite\cf8 () \{\
        \cf6 // Modifie la s\'e9curit\'e9 en fonction des param\'e8tres coch\'e9s\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 len2 \cf5 = \cf9 longueurSeekBar\cf5 .\cf11 getProgress\cf8 ()\cf5 ;\
        
\f0\b \cf2 int 
\f1\b0 \cf9 len \cf5 = \cf9 len2 \cf5 * \cf9 len2 \cf5 + \cf14 3 \cf5 * \cf9 len2 \cf5 + \cf14 10\cf5 ;\
        \cf9 longueurTextView\cf5 .\cf11 setText\cf8 (\cf10 "Longueur : " \cf5 + \cf9 len\cf8 )\cf5 ;\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 nb_carac \cf5 = \cf9 base\cf5 .\cf11 length\cf8 ()\cf5 ;\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 bits \cf5 = \cf8 (
\f0\b \cf2 int
\f1\b0 \cf8 ) ((\cf4 Math\cf5 .
\f2\i\b \cf6 round
\f1\i0\b0 \cf8 (\cf4 Math\cf5 .
\f2\i\b \cf6 log
\f1\i0\b0 \cf8 (\cf4 Math\cf5 .
\f2\i\b \cf6 pow
\f1\i0\b0 \cf8 (\cf9 nb_carac\cf5 , \cf9 len\cf8 )) \cf5 / \cf4 Math\cf5 .
\f2\i\b \cf6 log
\f1\i0\b0 \cf8 (\cf14 2\cf8 ))))\cf5 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 bits \cf5 == \cf14 0\cf8 ) \{\
            \cf9 securiteSeekBar\cf5 .\cf11 setProgress\cf8 (\cf9 bits\cf8 )\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf9 securiteSeekBar\cf5 .\cf11 setProgress\cf8 (\cf9 bits \cf5 - \cf14 32\cf8 )\cf5 ;\
        \cf8 \}\
        \cf4 String\cf8 [] \cf9 result \cf5 = \cf11 securite\cf8 (\cf9 bits\cf8 )\cf5 ;\
        \cf9 securiteTextView\cf5 .\cf11 setText\cf8 (\cf9 result\cf8 [\cf14 0\cf8 ] \cf5 + \cf9 bits \cf5 + \cf10 " bits"\cf8 )\cf5 ;\
        \cf9 securiteTextView\cf5 .\cf11 setTextColor\cf8 (\cf4 Color\cf5 .
\f2\i\b \cf6 parseColor
\f1\i0\b0 \cf8 (\cf9 result\cf8 [\cf14 1\cf8 ]))\cf5 ;\
    \cf8 \}\
\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 String\cf8 [] \cf11 modification\cf8 (\cf4 String \cf12 mot\cf8 ) \{\
        \cf6 // Modifie le site et la clef en un mot de passe (mot = site + clef)\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 len \cf5 = \cf9 longueurSeekBar\cf5 .\cf11 getProgress\cf8 ()\cf5 ;\
        
\f0\b \cf2 int 
\f1\b0 \cf9 len2 \cf5 = \cf9 len \cf5 * \cf9 len \cf5 + \cf14 3 \cf5 * \cf9 len \cf5 + \cf14 10\cf5 ;\
\
        \cf4 BigInteger \cf9 code \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 BigInteger\cf8 (
\f2\i\b \cf6 sha256
\f1\i0\b0 \cf8 (\cf12 mot\cf8 )\cf5 , \cf14 16\cf8 )\cf5 ;\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 nb_carac \cf5 = \cf9 base\cf5 .\cf11 length\cf8 ()\cf5 ;\
\
        \cf4 String \cf5 code2 = 
\f2\i\b \cf6 dec2Base
\f1\i0\b0 \cf8 (\cf9 code\cf5 , \cf9 base\cf8 )\cf5 .\cf11 substring\cf8 (\cf14 0\cf5 , \cf9 len2\cf8 )\cf5 ;\
\
        
\f0\b \cf2 int 
\f1\b0 \cf9 bits \cf5 = \cf8 (
\f0\b \cf2 int
\f1\b0 \cf8 ) ((\cf4 Math\cf5 .
\f2\i\b \cf6 round
\f1\i0\b0 \cf8 (\cf4 Math\cf5 .
\f2\i\b \cf6 log
\f1\i0\b0 \cf8 (\cf4 Math\cf5 .
\f2\i\b \cf6 pow
\f1\i0\b0 \cf8 (\cf9 nb_carac\cf5 , code2.\cf11 length\cf8 ())) \cf5 / \cf4 Math\cf5 .
\f2\i\b \cf6 log
\f1\i0\b0 \cf8 (\cf14 2\cf8 ))))\cf5 ;\
        \cf4 String\cf8 [] \cf9 result \cf5 = \cf11 securite\cf8 (\cf9 bits\cf8 )\cf5 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 bits \cf5 == \cf14 0\cf8 ) \{\
            \cf5 code2 = \cf10 ""\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 return new 
\f1\b0 \cf11 String\cf8 []\{\cf5 code2, \cf9 result\cf8 [\cf14 0\cf8 ] \cf5 + \cf9 bits \cf5 + \cf10 " bits"\cf5 , \cf4 Integer\cf5 .
\f2\i\b \cf6 toString
\f1\i0\b0 \cf8 (\cf9 bits\cf8 )\cf5 , \cf9 result\cf8 [\cf14 1\cf8 ]\}\cf5 ;\
    \cf8 \}\
\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 String\cf8 [] \cf11 securite\cf8 (
\f0\b \cf2 int 
\f1\b0 \cf12 bits\cf8 ) \{\
        \cf6 // Renvoie la bonne couleur ainsi que la s\'e9curit\'e9 suivant le nombre de bits\
\
        \cf4 String \cf9 secure\cf5 ;\
        \cf4 String \cf9 color\cf5 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf12 bits \cf5 == \cf14 0\cf8 ) \{\
            \cf9 secure \cf5 = \cf10 " Aucune "\cf5 ;\
            \cf9 color \cf5 = \cf10 "#FE0101"\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf12 bits \cf5 < \cf14 64\cf8 ) \{\
            \cf9 secure \cf5 = \cf10 " Tr\'e8s Faible "\cf5 ;\
            \cf9 color \cf5 = \cf10 "#FE0101"\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf12 bits \cf5 < \cf14 80\cf8 ) \{\
            \cf9 secure \cf5 = \cf10 " Faible "\cf5 ;\
            \cf9 color \cf5 = \cf10 "#FE4501"\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf12 bits \cf5 < \cf14 100\cf8 ) \{\
            \cf9 secure \cf5 = \cf10 " Moyenne "\cf5 ;\
            \cf9 color \cf5 = \cf10 "#FE7601"\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf12 bits \cf5 < \cf14 126\cf8 ) \{\
            \cf9 secure \cf5 = \cf10 " Forte "\cf5 ;\
            \cf9 color \cf5 = \cf10 "#53FE38"\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf9 secure \cf5 = \cf10 " Tr\'e8s Forte "\cf5 ;\
            \cf9 color \cf5 = \cf10 "#1CD001"\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 return new 
\f1\b0 \cf11 String\cf8 []\{\cf9 secure\cf5 , \cf9 color\cf8 \}\cf5 ;\
    \cf8 \}\
\
\
    
\f0\b \cf2 private static 
\f1\b0 \cf4 String \cf11 sha256\cf8 (\cf4 String \cf12 mot\cf8 ) \{\
        \cf6 // Modifie mot en un chiffre en hexad\'e9cimal suivant la fonction de hachage sha256\
\
        
\f0\b \cf2 try 
\f1\b0 \cf8 \{\
            \cf4 MessageDigest \cf9 digest \cf5 = \cf4 MessageDigest\cf5 .
\f2\i\b \cf6 getInstance
\f1\i0\b0 \cf8 (\cf10 "SHA-256"\cf8 )\cf5 ;\
            
\f0\b \cf2 byte
\f1\b0 \cf8 [] \cf9 hash \cf5 = \cf9 digest\cf5 .\cf11 digest\cf8 (\cf12 mot\cf5 .\cf11 getBytes\cf8 (\cf10 "UTF-8"\cf8 ))\cf5 ;\
            \cf4 StringBuilder \cf9 hexString \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 StringBuilder\cf8 ()\cf5 ;\
\
            
\f0\b \cf2 for 
\f1\b0 \cf8 (
\f0\b \cf2 byte 
\f1\b0 \cf9 b \cf5 : \cf9 hash\cf8 ) \{\
                \cf4 String \cf9 hex \cf5 = \cf4 Integer\cf5 .
\f2\i\b \cf6 toHexString
\f1\i0\b0 \cf8 (\cf14 0xff \cf5 & \cf9 b\cf8 )\cf5 ;\
                
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 hex\cf5 .\cf11 length\cf8 () \cf5 == \cf14 1\cf8 ) \cf9 hexString\cf5 .\cf11 append\cf8 (\cf10 '0'\cf8 )\cf5 ;\
                \cf9 hexString\cf5 .\cf11 append\cf8 (\cf9 hex\cf8 )\cf5 ;\
            \cf8 \}\
            
\f0\b \cf2 return 
\f1\b0 \cf9 hexString\cf5 .\cf11 toString\cf8 ()\cf5 ;\
        \cf8 \} 
\f0\b \cf2 catch 
\f1\b0 \cf8 (\cf4 Exception \cf12 ex\cf8 ) \{\
            
\f0\b \cf2 throw new 
\f1\b0 \cf11 RuntimeException\cf8 (\cf12 ex\cf8 )\cf5 ;\
        \cf8 \}\
    \}\
\
\
    \cf6 // MARK : Actions\
\
    
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\{\cf10 "SetTextI18n"\cf5 , \cf10 "ResourceAsColor"\cf5 , \cf10 "ResourceType"\cf8 \})\
    
\f0\b \cf2 public void 
\f1\b0 \cf11 questionChange\cf8 (\cf4 View \cf12 view\cf8 ) \{\
        \cf6 // TextView Message Informatif\
\
        
\f0\b \cf2 final 
\f1\b0 \cf4 TextView \cf9 message \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 TextView\cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf8 )\cf5 ;\
        \cf9 message\cf5 .\cf11 setText\cf8 (\cf11 getString\cf8 (\cf4 R\cf5 .\cf4 string\cf5 .
\f2\i\b \cf13 info_questions
\f1\i0\b0 \cf8 ))\cf5 ;\
        \cf9 message\cf5 .\cf11 setTextSize\cf8 (\cf14 15\cf8 )\cf5 ;\
        \cf9 message\cf5 .\cf11 setTextColor\cf8 (\cf4 Color\cf5 .
\f2\i\b \cf6 parseColor
\f1\i0\b0 \cf8 (\cf11 getString\cf8 (\cf4 R\cf5 .\cf4 color\cf5 .
\f2\i\b \cf13 colorText
\f1\i0\b0 \cf8 )))\cf5 ;\
        \cf9 message\cf5 .\cf11 setPadding\cf8 (\cf14 50\cf5 , \cf14 0\cf5 , \cf14 50\cf5 , \cf14 0\cf8 )\cf5 ;\
\
        \cf6 // Questions dans les CheckButtons\
        \cf4 String\cf8 [] \cf9 questions \cf5 = \cf8 \{\cf10 "nom de jeune fille de votre m\'e8re"\cf5 , \cf10 "nom de votre premier animal de compagnie"\cf5 ,\
                \cf10 "rue de votre maison d'enfance"\cf5 , \cf10 "pas de question"\cf8 \}\cf5 ;\
        
\f0\b \cf2 final boolean
\f1\b0 \cf8 [] \cf9 checkedItems \cf5 = \cf8 \{
\f0\b \cf2 false
\f1\b0 \cf5 , 
\f0\b \cf2 false
\f1\b0 \cf5 , 
\f0\b \cf2 false
\f1\b0 \cf5 , 
\f0\b \cf2 false
\f1\b0 \cf8 \}\cf5 ;\
\
        \cf6 // Cr\'e9ation alert box\
        \cf4 AlertDialog\cf5 .\cf4 Builder \cf9 builder \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf4 AlertDialog\cf5 .\cf11 Builder\cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf4 R\cf5 .\cf4 style\cf5 .
\f2\i\b \cf13 AlertDialogCustom
\f1\i0\b0 \cf8 )\
                \cf5 .\cf11 setView\cf8 (\cf9 message\cf8 ) \cf6 // Connexion avec message\
                \cf5 .\cf11 setTitle\cf8 (\cf10 "Question personnelle :"\cf8 ) \cf6 // Titre\
                \cf5 .\cf11 setNegativeButton\cf8 (\cf10 "Annuler"\cf5 , 
\f0\b \cf2 null
\f1\b0 \cf8 ) \cf6 // Bouton Annuler\
                \cf5 .\cf11 setMultiChoiceItems\cf8 (\cf9 questions\cf5 , \cf9 checkedItems\cf5 , 
\f0\b \cf2 new 
\f1\b0 \cf7 DialogInterface\cf5 .\cf4 OnMultiChoiceClickListener\cf8 () \{\
                    
\f0\b \cf6 @Override\
                    \cf2 public void 
\f1\b0 \cf11 onClick\cf8 (\cf7 DialogInterface \cf12 dialog\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 which\cf5 , 
\f0\b \cf2 boolean 
\f1\b0 \cf12 isChecked\cf8 ) \{\
                        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf7 checkedItems\cf8 [\cf14 0\cf8 ]) \{\
                            \cf9 clefEditText\cf5 .\cf11 setHint\cf8 (\cf10 "nom jeune fille m\'e8re"\cf8 )\cf5 ;\
                            \cf9 clefEditText\cf5 .\cf11 setText\cf8 (\cf10 ""\cf8 )\cf5 ;\
                            \cf12 dialog\cf5 .\cf11 cancel\cf8 ()\cf5 ;\
                        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf7 checkedItems\cf8 [\cf14 1\cf8 ]) \{\
                            \cf9 clefEditText\cf5 .\cf11 setHint\cf8 (\cf10 "nom premier animal de compagnie"\cf8 )\cf5 ;\
                            \cf9 clefEditText\cf5 .\cf11 setText\cf8 (\cf10 ""\cf8 )\cf5 ;\
                            \cf12 dialog\cf5 .\cf11 cancel\cf8 ()\cf5 ;\
                        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf7 checkedItems\cf8 [\cf14 2\cf8 ]) \{\
                            \cf9 clefEditText\cf5 .\cf11 setHint\cf8 (\cf10 "rue maison enfance"\cf8 )\cf5 ;\
                            \cf9 clefEditText\cf5 .\cf11 setText\cf8 (\cf10 ""\cf8 )\cf5 ;\
                            \cf12 dialog\cf5 .\cf11 cancel\cf8 ()\cf5 ;\
                        \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf7 checkedItems\cf8 [\cf14 3\cf8 ]) \{\
                            \cf9 clefEditText\cf5 .\cf11 setHint\cf8 (\cf10 "mot clef"\cf8 )\cf5 ;\
                            \cf9 clefEditText\cf5 .\cf11 setText\cf8 (\cf10 ""\cf8 )\cf5 ;\
                            \cf12 dialog\cf5 .\cf11 cancel\cf8 ()\cf5 ;\
                        \cf8 \}\
                    \}\
                \})\cf5 ;\
        \cf9 builder\cf5 .\cf11 show\cf8 ()\cf5 ; \cf6 // Monter Alert box\
    \cf8 \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf11 copierChange\cf8 (\cf4 View \cf12 view\cf8 ) \{\
        \cf4 java.lang.String \cf9 code \cf5 = \cf9 motPasseEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 !\cf8 (\cf9 code\cf5 .\cf11 length\cf8 () \cf5 == \cf14 0\cf8 ) \cf5 && !\cf8 (\cf9 code\cf5 .\cf11 equals\cf8 (\cf10 "Il manque des valeurs"\cf8 ))) \{\
            \cf11 copier\cf8 (\cf9 code\cf8 )\cf5 ;\
            \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf10 "Mot de passe copi\'e9 dans le presse-papier"\cf5 , \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_LONG
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
        \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf10 "Vous n'avez aucun mot de passe \'e0 copier"\cf5 , \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_LONG
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
        \cf8 \}\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf11 checkChange\cf8 (\cf4 View \cf12 view\cf8 ) \{\
        \cf6 // Switch Chang\'e9\
\
        \cf11 generer\cf8 ()\cf5 ;\
    \cf8 \}\
\
    
\f0\b \cf2 private 
\f1\b0 \cf7 TextWatcher \cf9 textWatcher \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf4 TextWatcher\cf8 () \{\
        \cf6 //Text Watch : g\'e9n\'e8re le mot de passe quand on a fini de modifier le texte\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 beforeTextChanged\cf8 (\cf7 CharSequence \cf12 charSequence\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 i\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 i1\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 i2\cf8 ) \{\
        \}\
\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onTextChanged\cf8 (\cf7 CharSequence \cf12 charSequence\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 i\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 i1\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 i2\cf8 ) \{\
        \}\
\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 afterTextChanged\cf8 (\cf7 Editable \cf12 editable\cf8 ) \{\
            \cf11 generer\cf8 ()\cf5 ;\
        \cf8 \}\
    \}\cf5 ;\
\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 SeekBar\cf5 .\cf7 OnSeekBarChangeListener \cf9 longueurListener \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf4 SeekBar\cf5 .\cf4 OnSeekBarChangeListener\cf8 () \{\
        
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\cf10 "SetTextI18n"\cf8 )\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onProgressChanged\cf8 (\cf4 SeekBar \cf12 seekBar\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 progress\cf5 , 
\f0\b \cf2 boolean 
\f1\b0 \cf12 fromUser\cf8 ) \{\
            \cf6 // Longueur Slider en changement\
\
            \cf11 generer\cf8 ()\cf5 ;\
        \cf8 \}\
\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onStartTrackingTouch\cf8 (\cf4 SeekBar \cf12 seekBar\cf8 ) \{\
\
        \}\
\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onStopTrackingTouch\cf8 (\cf4 SeekBar \cf12 longueur\cf8 ) \{\
\
        \}\
    \}\cf5 ;\
\
\
    
\f0\b \cf2 private 
\f1\b0 \cf4 SeekBar\cf5 .\cf7 OnSeekBarChangeListener \cf9 securiteListener \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf4 SeekBar\cf5 .\cf4 OnSeekBarChangeListener\cf8 () \{\
        
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\cf10 "SetTextI18n"\cf8 )\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onProgressChanged\cf8 (\cf4 SeekBar \cf12 seekBar\cf5 , 
\f0\b \cf2 int 
\f1\b0 \cf12 progress\cf5 , 
\f0\b \cf2 boolean 
\f1\b0 \cf12 fromUser\cf8 ) \{\
            \cf6 // S\'e9curit\'e9 Slider en changement\
\
            
\f0\b \cf2 int 
\f1\b0 \cf9 bits \cf5 = \cf9 securiteSeekBar\cf5 .\cf11 getProgress\cf8 () \cf5 + \cf14 32\cf5 ;\
            \cf4 String\cf8 [] \cf9 result \cf5 = \cf11 securite\cf8 (\cf9 bits\cf8 )\cf5 ;\
            \cf9 securiteTextView\cf5 .\cf11 setText\cf8 (\cf9 result\cf8 [\cf14 0\cf8 ] \cf5 + \cf9 bits \cf5 + \cf10 " bits"\cf8 )\cf5 ;\
            \cf9 securiteTextView\cf5 .\cf11 setTextColor\cf8 (\cf4 Color\cf5 .
\f2\i\b \cf6 parseColor
\f1\i0\b0 \cf8 (\cf9 result\cf8 [\cf14 1\cf8 ]))\cf5 ;\
        \cf8 \}\
\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onStartTrackingTouch\cf8 (\cf4 SeekBar \cf12 seekBar\cf8 ) \{\
\
        \}\
\
        
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\cf10 "SetTextI18n"\cf8 )\
        
\f0\b \cf6 @Override\
        \cf2 public void 
\f1\b0 \cf11 onStopTrackingTouch\cf8 (\cf4 SeekBar \cf12 seekBar\cf8 ) \{\
            \cf6 // S\'e9curit\'e9 Slider une fois chang\'e9e\
\
            
\f0\b \cf2 int 
\f1\b0 \cf9 bits \cf5 = \cf9 securiteSeekBar\cf5 .\cf11 getProgress\cf8 () \cf5 + \cf14 32\cf5 ;\
            
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 42\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 47\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 48\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 51\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 55\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 57\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 61\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 63\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 66\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 0\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 67\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 72\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 76\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 80\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 86\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 88\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 94\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 1\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 95\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 103\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 109\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 114\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 115\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 123\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else if 
\f1\b0 \cf8 (\cf9 bits \cf5 < \cf14 126\cf8 ) \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 false
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
                \cf9 longueurSeekBar\cf5 .\cf11 setProgress\cf8 (\cf14 2\cf8 )\cf5 ;\
                \cf9 minSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 majSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 symSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
                \cf9 chiSwitch\cf5 .\cf11 setChecked\cf8 (
\f0\b \cf2 true
\f1\b0 \cf8 )\cf5 ;\
            \cf8 \}\
            \cf11 generer\cf8 ()\cf5 ;\
        \cf8 \}\
    \}\cf5 ;\
\
\
    
\f0\b \cf6 @Override\
    \cf2 public boolean 
\f1\b0 \cf11 onCreateOptionsMenu\cf8 (\cf7 Menu \cf12 menu\cf8 ) \{\
        \cf6 // Cr\'e9ation menu\
\
        
\f0\b \cf2 super
\f1\b0 \cf5 .\cf11 onCreateOptionsMenu\cf8 (\cf12 menu\cf8 )\cf5 ;\
\
        \cf11 getMenuInflater\cf8 ()\cf5 .\cf11 inflate\cf8 (\cf4 R\cf5 .\cf4 menu\cf5 .
\f2\i\b \cf13 menu_main
\f1\i0\b0 \cf5 , \cf12 menu\cf8 )\cf5 ;\
\
        
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 darkMode\cf8 )\{\
            \cf6 // Item light\
            \cf12 menu\cf5 .\cf11 findItem\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 darkmode
\f1\i0\b0 \cf8 )\cf5 .\cf11 setIcon\cf8 (\cf4 R\cf5 .\cf4 drawable\cf5 .
\f2\i\b \cf13 light
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
            \cf6 // Item night\
            \cf12 menu\cf5 .\cf11 findItem\cf8 (\cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 darkmode
\f1\i0\b0 \cf8 )\cf5 .\cf11 setIcon\cf8 (\cf4 R\cf5 .\cf4 drawable\cf5 .
\f2\i\b \cf13 night
\f1\i0\b0 \cf8 )\cf5 ;\
        \cf8 \}\
\
        
\f0\b \cf2 return true
\f1\b0 \cf5 ;\
    \cf8 \}\
\
\
    
\f0\b \cf6 @SuppressLint
\f1\b0 \cf8 (\cf10 "Assert"\cf8 )\
    
\f0\b \cf6 @Override\
    \cf2 public boolean 
\f1\b0 \cf11 onOptionsItemSelected\cf8 (\cf7 MenuItem \cf12 item\cf8 ) \{\
        \cf6 // Action boutons menu\
\
        
\f0\b \cf2 switch 
\f1\b0 \cf8 (\cf12 item\cf5 .\cf11 getItemId\cf8 ()) \{\
\
            
\f0\b \cf2 case 
\f1\b0 \cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 darkmode
\f1\i0\b0 \cf5 :\
                \cf6 // DarkMode\
                \cf11 setDarkMode\cf8 ()\cf5 ;\
                darkMode = !darkMode;\
                
\f0\b \cf2 break
\f1\b0 \cf5 ;\
\
            
\f0\b \cf2 case 
\f1\b0 \cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 aide
\f1\i0\b0 \cf5 :\
                \cf6 // Aide lorsque bouton help est press\'e9\
\
                
\f0\b \cf2 final 
\f1\b0 \cf4 SpannableString \cf9 s \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 SpannableString\cf8 (\cf11 getString\cf8 (\cf4 R\cf5 .\cf4 string\cf5 .
\f2\i\b \cf13 info_app
\f1\i0\b0 \cf8 ))\cf5 ;\
                \cf4 Linkify\cf5 .
\f2\i\b \cf6 addLinks
\f1\i0\b0 \cf8 (\cf9 s\cf5 , \cf4 Linkify\cf5 .
\f2\i\b \cf13 ALL
\f1\i0\b0 \cf8 )\cf5 ;\
\
                
\f0\b \cf2 final 
\f1\b0 \cf4 AlertDialog \cf9 d \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf4 AlertDialog\cf5 .\cf11 Builder\cf8 (
\f0\b \cf2 this
\f1\b0 \cf5 , \cf4 R\cf5 .\cf4 style\cf5 .
\f2\i\b \cf13 AlertDialogCustom
\f1\i0\b0 \cf8 )\
                        \cf5 .\cf11 setTitle\cf8 (\cf10 "Informations"\cf8 )\
                        \cf5 .\cf11 setPositiveButton\cf8 (\cf4 android.R\cf5 .\cf4 string\cf5 .
\f2\i\b \cf13 ok
\f1\i0\b0 \cf5 , 
\f0\b \cf2 null
\f1\b0 \cf8 )\
                        \cf5 .\cf11 setMessage\cf8 (\cf9 s\cf8 )\
                        \cf5 .\cf11 create\cf8 ()\cf5 ;\
\
                \cf9 d\cf5 .\cf11 show\cf8 ()\cf5 ;\
                \cf8 ((\cf4 TextView\cf8 ) \cf9 d\cf5 .\cf11 findViewById\cf8 (\cf4 android.R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 message
\f1\i0\b0 \cf8 ))\cf5 .\cf11 setMovementMethod\cf8 (\cf4 LinkMovementMethod\cf5 .
\f2\i\b \cf6 getInstance
\f1\i0\b0 \cf8 ())\cf5 ;\
                
\f0\b \cf2 break
\f1\b0 \cf5 ;\
\
            
\f0\b \cf2 case 
\f1\b0 \cf4 R\cf5 .\cf4 id\cf5 .
\f2\i\b \cf13 partager
\f1\i0\b0 \cf5 :\
                \cf6 // Partage le mot de passe lorsque shareButton est press\'e9\
                \cf4 java.lang.String \cf9 code \cf5 = \cf9 motPasseEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 ;\
\
                
\f0\b \cf2 if 
\f1\b0 \cf8 (\cf5 !\cf8 (\cf9 code\cf5 .\cf11 length\cf8 () \cf5 == \cf14 0\cf8 ) \cf5 && !\cf8 (\cf9 code\cf5 .\cf11 equals\cf8 (\cf10 "Il manque des valeurs"\cf8 ))) \{\
                    \cf4 java.lang.String \cf9 site \cf5 = \cf9 siteEditText\cf5 .\cf11 getText\cf8 ()\cf5 .\cf11 toString\cf8 ()\cf5 ;\
                    \cf4 Intent \cf9 share \cf5 = 
\f0\b \cf2 new 
\f1\b0 \cf11 Intent\cf8 (\cf4 android.content.Intent\cf5 .
\f2\i\b \cf13 ACTION_SEND
\f1\i0\b0 \cf8 )\cf5 ;\
                    \cf9 share\cf5 .\cf11 setType\cf8 (\cf10 "text/plain"\cf8 )\cf5 ;\
                    \cf9 share\cf5 .\cf11 putExtra\cf8 (\cf4 Intent\cf5 .
\f2\i\b \cf13 EXTRA_TEXT
\f1\i0\b0 \cf5 , \cf10 "Mon mot de passe pour " \cf5 + \cf9 site \cf5 + \cf10 " est :\cf14 \\n\cf10 " \cf5 + \cf9 code\cf8 )\cf5 ;\
                    \cf11 startActivity\cf8 (\cf4 Intent\cf5 .
\f2\i\b \cf6 createChooser
\f1\i0\b0 \cf8 (\cf9 share\cf5 , \cf10 "Mot de passe"\cf8 ))\cf5 ;\
                \cf8 \} 
\f0\b \cf2 else 
\f1\b0 \cf8 \{\
                    \cf4 Toast\cf5 .
\f2\i\b \cf6 makeText
\f1\i0\b0 \cf8 (\cf4 MainActivity\cf5 .
\f0\b \cf2 this
\f1\b0 \cf5 , \cf10 "Vous n'avez aucun mot de passe \'e0 partager"\cf5 , \cf4 Toast\cf5 .
\f2\i\b \cf13 LENGTH_LONG
\f1\i0\b0 \cf8 )\cf5 .\cf11 show\cf8 ()\cf5 ;\
                \cf8 \}\
                
\f0\b \cf2 break
\f1\b0 \cf5 ;\
        \cf8 \}\
        
\f0\b \cf2 return super
\f1\b0 \cf5 .\cf11 onOptionsItemSelected\cf8 (\cf12 item\cf8 )\cf5 ;\
    \cf8 \}\
\}\
}