{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
toLowerCase() permet de transformer tout caract\'e8re alphab\'e9tique en son \'e9quivalent minuscule\
toUpperCase() permet de transformer tout caract\'e8re alphab\'e9tique en son \'e9quivalent majuscule\
char carat = chaine.charAt(int), int , caract\'e8re de position int dans la chaine de caract\'e8re\
int place = chaine.index0f(char),  indice de l\'92emplacement d\'92un caract\'e8re dans la chaine de caract\'e8re\
length() Longueur d\'92une chaine de caract\'e8re\
\
\
Programme affine , Vigen\'e8re\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 package fr.juliettedebono.programme;\
\
import java.awt.Toolkit;\
import java.awt.datatransfer.StringSelection;\
import java.util.Scanner;\
\
public class main \{\
\
	public static void main(String[] args) \{\
		Scanner sc = new Scanner(System.in);\
		System.out.println("Veuillez saisir le nom du site :");\
		String mess = sc.nextLine();\
		System.out.println("Veuillez saisir le mot clef :");\
		String mot = sc.nextLine();\
		System.out.println("Veuillez saisir la clef A :");\
		int A = sc.nextInt();\
		System.out.println("Veuillez saisir la clef B :");\
		int B = sc.nextInt();\
		\
		\
		String code = chiffrement_mdp(mess, A, B);\
		mot = mot.toUpperCase();\
		String enc = encrypt(mess, mot);\
		\
		int longueur = code.length();\
		char lettre1 = code.charAt(0);\
		char lettreMax = code.charAt(longueur - 1);\
		String lettre1b=String.valueOf(lettre1);  \
		String lettreMaxb=String.valueOf(lettreMax);\
		lettre1b = lettre1b.toUpperCase();\
		lettreMaxb = lettreMaxb.toUpperCase();\
		String code2 = code.substring(1, longueur-1);\
		code2 = "/" + lettre1b + "1" + code2 + "2" + lettreMaxb + ".";\
		presse_papier(code2);\
		System.out.println("Le mot de passe affine est : " + code2 + " de longueur : " + code2.length());\
        \
        \
        int longueurv = enc.length();\
		char lettre1v = enc.charAt(0);\
		char lettreMaxv = enc.charAt(longueurv - 1);\
		String lettre1bv=String.valueOf(lettre1v);  \
		String lettreMaxbv=String.valueOf(lettreMaxv);\
		lettre1bv = lettre1bv.toUpperCase();\
		lettreMaxbv = lettreMaxbv.toUpperCase();\
		String enc2 = enc.substring(1, longueurv-1);\
		enc2 = "/" + lettre1bv + "1" + enc2 + "2" + lettreMaxbv + ".";\
        \
		System.out.println("Le mot de passe vigenere est : " + enc2 + " de longueur : " + enc2.length());\
    \}\
	public static char decalage(char C, int A, int B) \{\
		String alpha = "abcdefghijklmnopqrstuvwxyz";\
		int D = alpha.indexOf(C);\
		D = (A*D+B)%26;\
		char E = alpha.charAt(D);\
		return E;\
		\}\
	public static String chiffrement_mdp(String mess, int A, int B) \{\
		String code = "";\
		mess = mess.toLowerCase();\
		if (mess.length()<=15) \{\
			int a = 15 - mess.length();\
			for (int i = 0; i<a ; i++) \{\
				mess = mess + mess.charAt(i*2%mess.length());\
			\}\
		\}\
		else \{\
			mess = mess.substring(0, 15);\
		\}\
		\
		\
		for(int i = 0; i < mess.length(); i++)\
		\{\
			char x = decalage(mess.charAt(i),A,B);\
			code = code + x;\
			\}\
		return code;\
		\}\
	public static void presse_papier(String mess) \{\
		StringSelection ss = new StringSelection(mess);\
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);\
	\}\
\
	static String encrypt(String text, final String key) \{\
        String res = "";\
        text = text.toUpperCase();\
        if (text.length()<=15) \{\
		int a = 15 - text.length();\
		for (int i = 0; i<a ; i++) \{\
			text = text + text.charAt(i*2%text.length());\
		\}\
	\}\
	else \{\
		text = text.substring(0, 15);\
	\}\
        for (int i = 0, j = 0; i < text.length(); i++) \{\
            char c = text.charAt(i);\
            if (c < 'A' || c > 'Z') continue;\
            res += (char)((c + key.charAt(j) - 2 * 'A') % 26 + 'A');\
            j = ++j % key.length();\
        \}\
        res = res.toLowerCase();\
        return res;\
    \}\
 \
    static String decrypt(String text, final String key) \{\
        String res = "";\
        text = text.toUpperCase();\
        for (int i = 0, j = 0; i < text.length(); i++) \{\
            char c = text.charAt(i);\
            if (c < 'A' || c > 'Z') continue;\
            res += (char)((c - key.charAt(j) + 26) % 26 + 'A');\
            j = ++j % key.length();\
        \}\
        return res;\
    \}\
\}}